{"version":3,"sources":["initial-data.js","task.jsx","column.jsx","index.js"],"names":["initialData","tasks","id","content","columns","title","taskIds","columnOrder","Container","styled","div","Task","this","props","task","React","Component","Title","h3","TaskList","Column","column","map","key","App","state","columnId","taskId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAgBeA,EAhBK,CAClBC,MAAO,CACL,SAAU,CAAEC,GAAI,SAAUC,QAAS,wBACnC,SAAU,CAAED,GAAI,SAAUC,QAAS,sBACnC,SAAU,CAAED,GAAI,SAAUC,QAAS,uBAErCC,QAAS,CACP,WAAY,CACVF,GAAI,WACJG,MAAO,QACPC,QAAS,CAAC,SAAU,SAAU,YAGlCC,YAAa,CAAC,a,wPCRhB,IAAMC,EAAYC,IAAOC,IAAV,KASMC,E,uKAEjB,OAAO,kBAACH,EAAD,KAAYI,KAAKC,MAAMC,KAAKX,a,GAFLY,IAAMC,W,mUCNxC,IAAMR,EAAYC,IAAOC,IAAV,KAKTO,EAAQR,IAAOS,GAAV,KAILC,EAAWV,IAAOC,IAAV,KAIOU,E,uKAEjB,OACE,kBAAC,EAAD,KACE,kBAACH,EAAD,KAAQL,KAAKC,MAAMQ,OAAOhB,OAC1B,kBAACc,EAAD,KACGP,KAAKC,MAAMZ,MAAMqB,KAAI,SAACR,GAAD,OACpB,kBAAC,EAAD,CAAMS,IAAKT,EAAKZ,GAAIY,KAAMA,a,GAPFC,IAAMC,WCUpCQ,G,kNAGJC,MAAQzB,E,uDAIE,IAAD,OAGP,OAAOY,KAAKa,MAAMlB,YAAYe,KAAI,SAACI,GAEjC,IAAML,EAAS,EAAKI,MAAMrB,QAAQsB,GAE5BzB,EAAQoB,EAAOf,QAAQgB,KAAI,SAACK,GAAD,OAAY,EAAKF,MAAMxB,MAAM0B,MAM9D,OAAO,kBAAC,EAAD,CAAQJ,IAAKF,EAAOnB,GAAImB,OAAQA,EAAQpB,MAAOA,W,GApB1Cc,IAAMC,YAyBxBY,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.b428b6a4.chunk.js","sourcesContent":["const initialData = {\n  tasks: {\n    \"task-1\": { id: \"task-1\", content: \"Search for tutorials\" },\n    \"task-2\": { id: \"task-2\", content: \"watch them 2 times\" },\n    \"task-3\": { id: \"task-3\", content: \"then practice them\" },\n  },\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"To do\",\n      taskIds: [\"task-1\", \"task-2\", \"task-3\"],\n    },\n  },\n  columnOrder: [\"column-1\"],\n};\n\nexport default initialData;\n\n/*\n\n\n\n\n\n\n\n\n\n\n                        ** beginning\n\nconst initialData = {\n  tasks: {\n    \"task-1\": { id: \"task-1\", content: \"Search for tutorials\" },\n    \"task-2\": { id: \"task-2\", content: \"watch them 2 times\" },\n    \"task-3\": { id: \"task-3\", content: \"then practice them\" },\n  },\n\n  // columns: this column object will be used to store the columns in our system.\n  columns: {\n    \"column-1\": {\n      // we use the column id    id: \"column-1\",  as the KEY for looking up the column\n      id: \"column-1\",\n      //   This column below, is the TO DO column\n      title: \"To do\",\n      //   Each columns has a TASK ID's ARRAY, this array serves 2 purposes:\n      taskIds: [\"task-1\", \"task-2\", \"task-3\"],\n      //   THE 1 PURPOSE is to indicate OWNERSHIP, we know that task 1 is inside of column 1\n      //  THE 2 PURPOSE of the array is to maintain order\n    },\n  },\n  //   This PROPERTY below is called column order, that we will use to record the order of the columns\n\n  columnOrder: [\"column-1\"],\n};\n\n\n\n\n*/\n","import React from \"react\";\nimport styled from \"styled-components\";\n//\n//\n//\nconst Container = styled.div`\nborder: 1px solid lightgrey;\n// internal padding of the tab of each task\npadding: 8px;\nmargin-bottom: 8px;\nborder-radius: 3px;\nbox-shadow: 0 0 5px 1px #eee;\n`;\n\nexport default class Task extends React.Component {\n  render() {\n    return <Container>{this.props.task.content}</Container>;\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n// more info on STYLED COMPONENTS looks FUN! : https://styled-components.com/\n//\nimport Task from \"./task\";\n\n// this container will WRAP the columns\n// here I am using the styled-components library :  https://github.com/styled-components/styled-components/issues/701\nconst Container = styled.div`\n  border: 2px solid olive;\n  width: 60vw;\n  height: 60vh;\n`;\nconst Title = styled.h3`\n  padding: 8px;\n  color: red;\n`;\nconst TaskList = styled.div`\n  padding: 8px;\n`;\n\nexport default class Column extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Title>{this.props.column.title}</Title>\n        <TaskList>\n          {this.props.tasks.map((task) => (\n            <Task key={task.id} task={task} />\n          ))}\n        </TaskList>\n      </Container>\n    );\n  }\n}\n\n/*\n\n\n\n\n\n\n\n\n\n\n\n\n                                        STYLED COMPONENTS  ***\n\n\n\n                    **  First, let's import styled-components and create a styled.button:\n\n                    import styled from 'styled-components'\n\n                    const Button = styled.button``\n\n                    This Button variable here is now a React component that you can use like any other React component!\n                    This unusual backtick syntax is a new JavaScript feature called a tagged template literal.\n\n                    You know how you can call functions with parenthesis? (myFunc()) Well, \n                    now you can also call functions with backticks! (learn more about tagged template literals)\n\n\n                    CONTINUE here : https://styled-components.com/\n\n*/\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport initialData from \"./initial-data\";\nimport Column from \"./column\";\n//\n//\nimport \"./scss/main.scss\";\n\n//\n/*\nimport \"reset-css\";\n\n\nyou need to have a css(where you can import it) file with all the \"reset\" you want, \nthis file contains all what you consider necessary to start \nyour css scss styles whatever like margin: 0, padding: 0; \nAND SO ON, CHECK THIS page to have an idea of what it is or just copy\nhis idea of reset: \n\nhttps://meyerweb.com/eric/tools/css/reset/\n\n\n//What is the difference between Normalize.css and Reset CSS?\n// https://stackoverflow.com/questions/6887336/what-is-the-difference-between-normalize-css-and-reset-css\n\n\n\n\n\n*/\n\nclass App extends React.Component {\n  //\n  // where the data of the tasks is passed\n  state = initialData;\n  //\n  //\n  //\n  render() {\n    // The columnOrder array stores the order in which I want to render out the columns in\n    // so I am going to map over that, in order to render out the columns\n    return this.state.columnOrder.map((columnId) => {\n      // now I need to PULL the column OUT of the STATE\n      const column = this.state.columns[columnId];\n      // And I will also get the task associated with that column\n      const tasks = column.taskIds.map((taskId) => this.state.tasks[taskId]);\n\n      /* here you will return the title of the column\n      return column.title; */\n      // but I want to render the column component rather than just a title\n\n      return <Column key={column.id} column={column} tasks={tasks} />;\n    });\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n/*\n\nInstead of creating a component , you can also add it like that but just\nin the beginning, not in serious projects:         const App = () => \"hello world\";\n\n\n// \n// \nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n//\nimport \"./scss/main.scss\";\n//\n//\nconst App = () => \"hello world\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\n*/\n"],"sourceRoot":""}