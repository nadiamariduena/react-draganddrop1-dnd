{"version":3,"sources":["initial-data.js","task.jsx","column.jsx","index.js"],"names":["initialData","tasks","id","content","columns","title","taskIds","columnOrder","Container","styled","div","props","isDragging","Task","draggableId","this","task","index","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","name","React","Component","Title","h3","TaskList","Column","Fragment","className","column","droppableId","droppableProps","map","key","placeholder","App","state","onDragEnd","result","destination","source","newTaskIds","Array","from","splice","newColumn","newState","setState","columnId","taskId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAqCeA,EArCK,CAClBC,MAAO,CACL,SAAU,CAAEC,GAAI,SAAUC,QAAS,wBACnC,SAAU,CAAED,GAAI,SAAUC,QAAS,wCACnC,SAAU,CACRD,GAAI,SACJC,QAAS,yCAEX,SAAU,CAAED,GAAI,SAAUC,QAAS,wBACnC,SAAU,CAAED,GAAI,SAAUC,QAAS,4BACnC,SAAU,CACRD,GAAI,SACJC,QAAS,uDAEX,SAAU,CACRD,GAAI,SACJC,QAAS,6BAGbC,QAAS,CACP,WAAY,CACVF,GAAI,WACJG,MAAO,OACPC,QAAS,CACP,SACA,SACA,SACA,SACA,SACA,SACA,YAINC,YAAa,CAAC,a,waC5BhB,IAAMC,EAAYC,IAAOC,IAAV,KASO,SAACC,GAAD,OAAYA,EAAMC,WAAa,WAAa,WAG7CC,E,uKACT,IAAD,OACP,OACE,kBAAC,IAAD,CAAWC,YAAaC,KAAKJ,MAAMK,KAAKd,GAAIe,MAAOF,KAAKJ,MAAMM,QAC3D,SAACC,EAAUC,GAAX,OACC,kBAACX,EAAD,iBACMU,EAASE,eACTF,EAASG,gBAFf,CAGEC,IAAKJ,EAASK,SACdX,WAAYO,EAASP,aAEpB,IACD,8BAAUY,KAAK,iBACd,EAAKb,MAAMK,KAAKb,gB,GAbKsB,IAAMC,W,mUCHxC,IAAMlB,EAAYC,IAAOC,IAAV,KAKTiB,EAAQlB,IAAOmB,GAAV,KAKLC,EAAWpB,IAAOC,IAAV,KAIOoB,E,uKACT,IAAD,OACP,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,QACb,kBAAC,EAAD,CAAWA,UAAU,QACnB,kBAACL,EAAD,KAAQZ,KAAKJ,MAAMsB,OAAO5B,OAE1B,kBAAC,IAAD,CAAW6B,YAAanB,KAAKJ,MAAMsB,OAAO/B,KACvC,SAACgB,GAAD,OACC,kBAACW,EAAD,eAAUP,IAAKJ,EAASK,UAAcL,EAASiB,gBAC5C,EAAKxB,MAAMV,MAAMmC,KAAI,SAACpB,EAAMC,GAAP,OACpB,kBAAC,EAAD,CAAMoB,IAAKrB,EAAKd,GAAIc,KAAMA,EAAMC,MAAOA,OAExCC,EAASoB,uB,GAdQb,IAAMC,WCUpCa,G,kNAGJC,MAAQxC,E,EAIRyC,UAAY,SAACC,GAAW,IAKdC,EAAqCD,EAArCC,YAAaC,EAAwBF,EAAxBE,OAAQ9B,EAAgB4B,EAAhB5B,YAE7B,GAAK6B,IAUHA,EAAYT,cAAgBU,EAAOV,aACnCS,EAAY1B,QAAU2B,EAAO3B,OAF/B,CAaA,IAAMgB,EAAS,EAAKO,MAAMpC,QAAQwC,EAAOV,aAKnCW,EAAaC,MAAMC,KAAKd,EAAO3B,SAIrCuC,EAAWG,OAAOJ,EAAO3B,MAAO,GAIhC4B,EAAWG,OAAOL,EAAY1B,MAAO,EAAGH,GAKxC,IAAMmC,EAAS,2BACVhB,GADU,IAEb3B,QAASuC,IAILK,EAAQ,2BAGT,EAAKV,OAHI,IAIZpC,QAAQ,2BAEH,EAAKoC,MAAMpC,SAFT,kBAIJ6C,EAAU/C,GAAK+C,MAQpB,EAAKE,SAASD,K,uDAKN,IAAD,OAGP,OACE,kBAAC,IAAD,CAAiBT,UAAW1B,KAAK0B,WAgB9B1B,KAAKyB,MAAMjC,YAAY6B,KAAI,SAACgB,GAE3B,IAAMnB,EAAS,EAAKO,MAAMpC,QAAQgD,GAE5BnD,EAAQgC,EAAO3B,QAAQ8B,KAC3B,SAACiB,GAAD,OAAY,EAAKb,MAAMvC,MAAMoD,MAO/B,OAAO,kBAAC,EAAD,CAAQhB,IAAKJ,EAAO/B,GAAI+B,OAAQA,EAAQhC,MAAOA,Y,GAjH9CwB,IAAMC,YAwHxB4B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.c6ac4859.chunk.js","sourcesContent":["const initialData = {\n  tasks: {\n    \"task-1\": { id: \"task-1\", content: \"Prepare your coffee \" },\n    \"task-2\": { id: \"task-2\", content: \"Search for new challenging tutorials\" },\n    \"task-3\": {\n      id: \"task-3\",\n      content: \"Analyse the tutorials and take notes \",\n    },\n    \"task-4\": { id: \"task-4\", content: \"Try to recreate them\" },\n    \"task-5\": { id: \"task-5\", content: \"Positive procrastination\" },\n    \"task-6\": {\n      id: \"task-6\",\n      content: \"Read  article about something different than coding\",\n    },\n    \"task-7\": {\n      id: \"task-7\",\n      content: \"Laugh as much as you can\",\n    },\n  },\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"TODO\",\n      taskIds: [\n        \"task-1\",\n        \"task-2\",\n        \"task-3\",\n        \"task-4\",\n        \"task-5\",\n        \"task-6\",\n        \"task-7\",\n      ],\n    },\n  },\n  columnOrder: [\"column-1\"],\n};\n\nexport default initialData;\n\n/*\n\n\n\n\n\n\n\n\n\n\n                        ** beginning\n\nconst initialData = {\n  tasks: {\n    \"task-1\": { id: \"task-1\", content: \"Search for tutorials\" },\n    \"task-2\": { id: \"task-2\", content: \"watch them 2 times\" },\n    \"task-3\": { id: \"task-3\", content: \"then practice them\" },\n  },\n\n  // columns: this column object will be used to store the columns in our system.\n  columns: {\n    \"column-1\": {\n      // we use the column id    id: \"column-1\",  as the KEY for looking up the column\n      id: \"column-1\",\n      //   This column below, is the TO DO column\n      title: \"To do\",\n      //   Each columns has a TASK ID's ARRAY, this array serves 2 purposes:\n      taskIds: [\"task-1\", \"task-2\", \"task-3\"],\n      //   THE 1 PURPOSE is to indicate OWNERSHIP, we know that task 1 is inside of column 1\n      //  THE 2 PURPOSE of the array is to maintain order\n    },\n  },\n  //   This PROPERTY below is called column order, that we will use to record the order of the columns\n\n  columnOrder: [\"column-1\"],\n};\n\n\n\n\n*/\n","import React from \"react\";\nimport styled from \"styled-components\";\n//\n//\nimport { Draggable } from \"react-beautiful-dnd\";\n//\nconst Container = styled.div`\n  border: 1px solid lightgrey;\n  // internal padding of the tab of each task\n  padding: 10px;\n  margin-bottom: 8px;\n  border-radius: 4px;\n\n  //   THE FOLLOWING will make that when you are dragging\n  // something the color change to gree but from the moment it reaches the destination it changes to white\n  background-color: ${(props) => (props.isDragging ? \"#f6d365;\" : \"white\")};\n`;\n\nexport default class Task extends React.Component {\n  render() {\n    return (\n      <Draggable draggableId={this.props.task.id} index={this.props.index}>\n        {(provided, snapshot) => (\n          <Container\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}\n            isDragging={snapshot.isDragging}\n          >\n            {\" \"}\n            <ion-icon name=\"bulb-outline\"></ion-icon>\n            {this.props.task.content}\n          </Container>\n        )}\n      </Draggable>\n    );\n  }\n}\n\n/* \n{\n\n                     A DRAGGABLE has 2 required PROPS\n\n                     1_ a draggable ID, which I will assign to the task ID:\n                                 draggableId={this.props.task.id}\n\n                     2_ Secondly it requires an index, I am not passing an INDEX,\n                     So due to that we need to pass in inside the column.jsx, but type the\n                     following first:\n                       index={this.props.index}\n          \n          \n}\n*/\n\n/*\n\nAt certain POINT you are going to have an error in the tutorial\n, it has something to do with the innerRef inside the column.jsx and the task.jsx,\nyou have to replace the innerRef for this ref={provided.innerRef} , like so:\n\n\n\n\nexport default class Task extends React.Component {\n  render() {\n    return (\n      <Draggable draggableId={this.props.task.id} index={this.props.index}>\n        {(provided) => (\n          <Container\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}\n          >\n            {this.props.task.content}\n          </Container>\n        )}\n      </Draggable>\n    );\n  }\n}\n\n\n\n\n\n\n\n\n*/\n","import React from \"react\";\n//\n//\nimport styled from \"styled-components\";\n// more info on STYLED COMPONENTS looks FUN! : https://styled-components.com/\n//\n//\nimport { Droppable } from \"react-beautiful-dnd\";\n//\nimport Task from \"./task\";\n//\n//\n\n// this container will WRAP the columns\n// here I am using the styled-components library :  https://github.com/styled-components/styled-components/issues/701\nconst Container = styled.div`\n  width: 40%;\n  height: 70vh;\n\n`;\nconst Title = styled.h3`\nfont-size: 1.5em;\n  padding: 20px;\n  color: #f6d365; ;\n`;\nconst TaskList = styled.div`\n  padding: 40px;\n`;\n\nexport default class Column extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"page\">\n          <Container className=\"cota\">\n            <Title>{this.props.column.title}</Title>\n\n            <Droppable droppableId={this.props.column.id}>\n              {(provided) => (\n                <TaskList ref={provided.innerRef} {...provided.droppableProps}>\n                  {this.props.tasks.map((task, index) => (\n                    <Task key={task.id} task={task} index={index} />\n                  ))}\n                  {provided.placeholder}\n                </TaskList>\n              )}\n            </Droppable>\n          </Container>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n/*\n\n\n\n\n\n\n\n\n\n\n\n\n                                        STYLED COMPONENTS  ***\n\n\n\n                    **  First, let's import styled-components and create a styled.button:\n\n                    import styled from 'styled-components'\n\n                    const Button = styled.button``\n\n                    This Button variable here is now a React component that you can use like any other React component!\n                    This unusual backtick syntax is a new JavaScript feature called a tagged template literal.\n\n                    You know how you can call functions with parenthesis? (myFunc()) Well, \n                    now you can also call functions with backticks! (learn more about tagged template literals)\n\n\n                    CONTINUE here : https://styled-components.com/\n\n\n\n\n\n\n\n\n\n                    export default class Column extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Title>{this.props.column.title}</Title>\n\n        <Droppable droppableId={this.props.column.id}>\n          Droppable has one required PROP, the ID need to be unique \n       \n          {(provided) => (\n            <TaskList innerRef={provided.innerRef} {...provided.droppableProps}>\n              {this.props.tasks.map((task, index) => (\n                <Task key={task.id} task={task} index={index} />\n              ))}\n              {provided.placeholder}\n              \n              \n              placeholder is a REACT element that is used to increase\n              the available space in a DROPPABLE during a drag when its \n              needed, the PLACEHOLDER needs to be added as a child of the component\n              that you designate as the droppable our droppable is now SET UP.\n\n              Go to the task component and make it draggable\n              \n            \n            </TaskList>\n          )}\n        </Droppable>\n      </Container>\n    );\n  }\n}\n\n*/\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n//\nimport { DragDropContext } from \"react-beautiful-dnd\";\n// After you import the above, wrap the content inside the return in this file, like so:\n/*     <DragDropContext>\n{this.state.columnOrder.map((columnId) => {\n  */\n//\nimport initialData from \"./initial-data\";\nimport Column from \"./column\";\n//\n\n//\nimport \"./scss/main.scss\";\n\n//\n/*\nimport \"reset-css\";\n\n\nyou need to have a css(where you can import it) file with all the \"reset\" you want, \nthis file contains all what you consider necessary to start \nyour css scss styles whatever like margin: 0, padding: 0; \nAND SO ON, CHECK THIS page to have an idea of what it is or just copy\nhis idea of reset: \n\nhttps://meyerweb.com/eric/tools/css/reset/\n\n\n//What is the difference between Normalize.css and Reset CSS?\n// https://stackoverflow.com/questions/6887336/what-is-the-difference-between-normalize-css-and-reset-css\n\n\n\n\n\n*/\n\nclass App extends React.Component {\n  //\n  // where the data of the tasks is passed\n  state = initialData;\n  //\n  //\n\n  onDragEnd = (result) => {\n    /* this function will \n    make that when you draw a task, it stays in place,\n    you will see it when the drag and drop works.\n    */\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n      /* if there is no destination then theres nothing that\n       we need to do as a result of this drag,we can simply exit: return */\n    }\n    //\n    //\n    //\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n      /*    IF  destination.droppableId is the same as the source and \n   if the INDEX has the same  the destination as the source, IF THESE 2 are TRUE,\n   then the USER drop the item back into the position that it started and so \n   we dont need to do anything */\n    ) {\n      return;\n    }\n    //\n    //\n    // RE order the task IDs array\n    const column = this.state.columns[source.droppableId];\n    // You could do the following : .columns['column-1] but its not covenable if you have\n    // more than 1 column, as you will have to update it again.\n    //\n    // the following will create a newTaskIds array with the same content as the last one\n    const newTaskIds = Array.from(column.taskIds);\n    //\n    //\n    // now i need to move the TaskIds from its old index to its new index\n    newTaskIds.splice(source.index, 1);\n    // splice will modify, here it means that from this index, it will remove 1 item\n    //\n    // USE SPLICE again but this time you wont remove anything thats why you have the zero, then you will insert the draggable ID\n    newTaskIds.splice(destination.index, 0, draggableId);\n    //\n    //\n    // Now create a new COLUMN which has the same properties as the ,\n    // old column but with the new task ID array\n    const newColumn = {\n      ...column,\n      taskIds: newTaskIds,\n    };\n    //\n    //\n    const newState = {\n      // the spread '...' will maintain the old properties in the state object\n      // but also invalidating the references of the parts that i want to change\n      ...this.state,\n      columns: {\n        // technically right now we dont need the spread, because I only hve 1 column\n        ...this.state.columns,\n        // insert the new columns into this map\n        [newColumn.id]: newColumn, //this line will override/annuler the existing column\n      },\n    };\n\n    //\n    //   //\n    //   // last ******\n\n    this.setState(newState);\n    //\n  };\n\n  //\n  render() {\n    // The columnOrder array stores the order in which I want to render out the columns in\n    // so I am going to map over that, in order to render out the columns\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        {/* \n        \n        A drag drop context has 3 CALLBACKS\n\n        1_ onDragStart which its called when the drag starts\n\n        2_ onDRagUpdate when its called when something changes during a drag, such as\n           an ITEM is moved into a new position\n        \n        3_ onDragEnd which is called at the end of a drag\n\n\n        THE ONLY required CALLBACK for a \"drag drop\" context is on drag end.\n        \n        */}\n        {this.state.columnOrder.map((columnId) => {\n          // now I need to PULL the column OUT of the STATE\n          const column = this.state.columns[columnId];\n          // And I will also get the task associated with that column\n          const tasks = column.taskIds.map(\n            (taskId) => this.state.tasks[taskId]\n          );\n\n          /* here you will return the title of the column\n      return column.title; */\n          // but I want to render the column component rather than just a title\n\n          return <Column key={column.id} column={column} tasks={tasks} />;\n        })}\n      </DragDropContext>\n    );\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n/*\n\nInstead of creating a component , you can also add it like that but just\nin the beginning, not in serious projects:         const App = () => \"hello world\";\n\n\n// \n// \nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n//\nimport \"./scss/main.scss\";\n//\n//\nconst App = () => \"hello world\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\n*/\n"],"sourceRoot":""}